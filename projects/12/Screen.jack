// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean currentColor;
    static Array screen, pow;

    /** Initializes the Screen. */
    function void init() {
        var int i, value;

        let currentColor = true;
        let screen = 16384;
        let pow = Array.new(16);
        let i = 0;
        let value = 1;
        while (i < 16)
        {
            let pow[i] = value;
            let i = i + 1;
            let value =  value + value;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192) {
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int bit, address, value;
    
        let address = 16384 + (x / 16) + (y * 32);
        let bit = x & 15;
        
        let value = Memory.peek(address);
        if (currentColor) 
        { 
            let value = value | pow[bit];
        } else 
        {      
            let value = value & ~pow[bit];
        }

        do Memory.poke(address, value);
        
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx, temp, xDir, yDir;

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        let xDir = 1;
        if (x1 > x2)
        {
            let xDir = -1;
        }
        let yDir = 1;
        if (y1 > y2)
        {
            let yDir = -1;
        }

        if(dx = 0) 
        {
            do Screen.drawVerticalLine(x1, y1, dy, yDir);
            return;
        }
        if (dy = 0) 
        {
            do Screen.drawHorizontalLine(x1, y1, dx, xDir);
            return;
        }
        
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        while ((~(a > dx)) & (~(b > dy))) 
        {
            do Screen.drawPixel(x1 + (a * xDir), y1 + (b * yDir));

            if (adyMinusbdx < 0) 
            {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            } else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    function void drawHorizontalLine(int x1, int y1, int dx, int xDir)
    {
        var int i;

        let i = 0;
        while (~(i > dx))
        {
            let i = i + 1;
            do Screen.drawPixel(x1 + (i * xDir), y1);
        }
        return;
    }

    function void drawVerticalLine(int x1, int y1, int dy, int yDir)
    {
        var int i;

        let i = 0;
        while (~(i > dy))
        {   
            let i = i + 1;
            do Screen.drawPixel(x1, y1 + (i * yDir));
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y;

        let y = y1;
        while (~(y > y2)) {
            let x = x1;
            while (~(x > x2)) {
                do Screen.drawPixel(x, y);
                let x = x + 1;
            }
            let y = y + 1;
        }
        return;
    }    

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, squareR;

        let dy = -r;
        let squareR = r * r;

        while (~(dy = r))
        {
            do Screen.drawLine(x - Math.sqrt(squareR - (dy * dy)), y + dy, x + Math.sqrt(squareR - (dy * dy)), y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
